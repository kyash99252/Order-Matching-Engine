# ===============================
# Core Application Configuration
# ===============================
spring.application.name=order-matching-engine

# ===============================
# DataSource (PostgreSQL)
# ===============================
spring.datasource.url=jdbc:postgresql://localhost:5433/exchange
spring.datasource.username=user
spring.datasource.password=mysecretpassword

# --- Performance Tuning: Connection Pool (HikariCP) ---
# Increase pool size to handle more concurrent requests (fixes connection starvation)
spring.datasource.hikari.maximum-pool-size=50
spring.datasource.hikari.minimum-idle=10
# Timeout after 20 seconds if a connection isn't available
spring.datasource.hikari.connection-timeout=20000
# Idle timeout for unused connections
spring.datasource.hikari.idle-timeout=30000
# Max lifetime before a connection is recycled (10 min)
spring.datasource.hikari.max-lifetime=600000
# Ensure driver uses correct timezone
spring.datasource.hikari.data-source-properties.serverTimezone=Asia/Kolkata

# ===============================
# JPA / Hibernate
# ===============================
spring.jpa.hibernate.ddl-auto=update
# Show SQL (set false in production for speed)
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Kolkata

# --- Performance Tuning: JDBC Batching (CRITICAL) ---
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# ===============================
# Redis Cache Configuration
# ===============================
spring.data.redis.host=localhost
spring.data.redis.port=6379

# ===============================
# Actuator & Metrics
# ===============================
management.endpoints.web.exposure.include=prometheus,health
management.metrics.tags.application=${spring.application.name}

# ===============================
# Logging
# ===============================
logging.level.com.example.exchange=INFO
logging.level.org.springframework.web=INFO

# ===============================
# Server (Tomcat) Thread Pool Tuning
# ===============================
# Increase the number of threads available to handle incoming HTTP requests
server.tomcat.threads.max=200
server.tomcat.threads.min-spare=30

# How many connections can queue before being rejected
server.tomcat.accept-count=200

# Increase max concurrent connections and tune timeouts
server.tomcat.max-connections=2000
server.tomcat.connection-timeout=5000
server.tomcat.keep-alive-timeout=15000

# ===============================
# Asynchronous Task Executor Tuning
# ===============================
# Configure the thread pool used by @Async tasks (e.g., background DB writes, cache updates)
spring.task.execution.pool.core-size=25
spring.task.execution.pool.max-size=75
spring.task.execution.pool.queue-capacity=300
spring.task.execution.thread-name-prefix=async-persist-

# Allow idle core threads to time out
spring.task.execution.pool.allow-core-thread-timeout=true
# Graceful shutdown handling
spring.task.execution.shutdown.await-termination=true
spring.task.execution.shutdown.await-termination-period=30s

# ===============================
# Async Request Handling (Web Layer)
# ===============================
# Timeout for async web requests (e.g., DeferredResult / WebFlux)
spring.mvc.async.request-timeout=5000

# ===============================
# Misc Performance Tips
# ===============================
# Enable compression for JSON responses to reduce bandwidth
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/plain
server.compression.min-response-size=1024

# Enable HTTP/2 for better concurrency (optional, but helpful)
server.http2.enabled=true